Моделирование рекурсивного метода
В этом разделе мы покажем, как любое рекурсивное решение преобразуется в ре-
шение на базе стека. Помните рекурсивный метод triangle() из первого раздела
этой главы?
int triangle(int n)
{
    if(n==1)
    return 1;
    else
    return( n + triangle(n-1) );
}
Мы разобьем этот алгоритм на отдельные операции, каждая из которых станет
отдельной секцией case в конструкции switch. (В C++ и некоторых других языках
аналогичная декомпозиция может быть реализована командами goto, но в Java goto
не поддерживается.)
Команда switch заключается в метод с именем step. При каждом вызове step()
выполняется одна секция case. Многократный вызов step() в конечном итоге при-
ведет к выполнению всего кода алгоритма.

Приведенный выше метод triangle() выполняет операции двух видов. Во-
первых, он выполняет арифметические действия, необходимые для вычисления
треугольных чисел: сравнение n с 1 и суммирование n с результатом предыдущих
рекурсивных вызовов. Однако triangle() также выполняет операции, необходимые
для управления самим методом, включая передачу управления, обращение к аргу-
ментам и адресу возврата. Эти операции не видны в программном коде, они встра-
иваются во все методы. В общих чертах при вызове метода происходит следующее:
    - Аргументы и адрес возврата заносятся в стек.
    - Метод обращается к своим аргументам, читая значения с вершины стека.
    - Непосредственно перед возвращением управления метод читает из стека адрес
возврата, после чего извлекает этот адрес и свои аргументы из стека и уничто-
жает их.

Программа stackTriangle.java содержит три класса: Params, StackX и StackTriangleApp.
Класс Params инкапсулирует адрес возврата и аргумент метода n; объекты
этого класса заносятся в стек. Класс StackX аналогичен классам стека из других
глав, но хранятся в нем объекты класса Params. Класс StackTriangleApp содержит
четыре метода: main(), recTriangle(), step() и стандартный метод getInt() для ввода
числовых данных.
Метод main() запрашивает у пользователя число, вызывает метод recTriangle()
для вычисления треугольного числа с номером n, после чего выводит результат.
Метод recTriangle() создает объект StackX и инициализирует codePart значением
1. Далее начинается цикл while с многократным вызовом step(). Выполнение цикла
прерывается лишь после того, как step() вернет true при достижении case 6 (точка
выхода). По сути, метод step() представляет собой одну большую конструкцию
switch, в которой каждая секция case соответствует фрагменту кода исходного
метода
triangle().